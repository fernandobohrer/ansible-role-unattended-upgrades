// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

// Clear unattended-upgrades configuration tree

// Clear options that apply to both Debian and Ubuntu
{% for option in __untnd_pgrds__generic_options %}
#clear {{ option }};
{% endfor %}

// Clear options that are specific to {{ ansible_distribution }}
{% for option in __untnd_pgrds__specific_options %}
#clear {{ option }};
{% endfor %}

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

// Overrides for 20auto-upgrades
// Sources:
// https://wiki.debian.org/UnattendedUpgrades
// https://github.com/mvo5/unattended-upgrades
// https://help.ubuntu.com/community/AutomaticSecurityUpdates

{% if untnd_pgrds__apt_periodic_unattended_upgrade is defined %}
// Run the "unattended-upgrade" security upgrade script every n-days (0=disabled)
APT::Periodic::Unattended-Upgrade "{{ untnd_pgrds__apt_periodic_unattended_upgrade }}";
{% endif %}

{% if untnd_pgrds__apt_periodic_update_package_lists is defined %}
// Do "apt-get update" automatically every n-days (0=disable)
APT::Periodic::Update-Package-Lists "{{ untnd_pgrds__apt_periodic_update_package_lists }}";
{% endif %}

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

// Overrides for 50unattended-upgrades
// Sources:
// /etc/apt/apt.conf.d/50unattended-upgrades
// https://github.com/mvo5/unattended-upgrades

{% if ansible_distribution == 'Debian' %}
Unattended-Upgrade::Origins-Pattern {
{% if untnd_pgrds__origins is defined %}
{% for origin in untnd_pgrds__origins %}
    "{{ origin }}";
{% endfor %}
{% else %}
{% for origin in __untnd_pgrds__origins_pattern %}
    "{{ origin }}";
{% endfor %}
{% endif %}
};
{% endif %}

{% if ansible_distribution == 'Ubuntu' %}
Unattended-Upgrade::Allowed-Origins {
{% if untnd_pgrds__origins is defined %}
{% for origin in untnd_pgrds__origins %}
    "{{ origin }}";
{% endfor %}
{% else %}
{% for origin in __untnd_pgrds__allowed_origins %}
    "{{ origin }}";
{% endfor %}
{% endif %}
};
{% endif %}

// No packages that match the regular expressions in this list will be marked for upgrade. If a package A has a
// blacklisted package B as a dependency then both packages A and B will not be upgraded. Note that it's a list
// of regular expressions, so you may need to escape special characters like "+" as "\+".
Unattended-Upgrade::Package-Blacklist {
{% for package in untnd_pgrds__package_blacklist %}
    "{{ package }}";
{% endfor %}
};

// Only packages that match the regular expressions in this list will be marked for upgrade. By default dependencies
// of whitelisted packages are allowed. This can be changed to only ever allow whitelisted packages with the
// Unattended-Upgrade::Package-Whitelist-Strict boolean option. Unattended-Upgrade::Package-Blacklist still applies,
// thus blacklisted packages covered by the whitelist will still not be upraded nor will be installed or upgraded as
// dependencies of whitelisted packages.
Unattended-Upgrade::Package-Whitelist {
{% for package in untnd_pgrds__package_whitelist %}
    "{{ package }}";
{% endfor %}
};

{% if ansible_distribution == 'Ubuntu' %}
{% if untnd_pgrds__dev_release is defined %}
// This option controls whether the development release of Ubuntu will be upgraded automatically.
// Valid values are "true", "false", and "auto".
Unattended-Upgrade::DevRelease "{{ untnd_pgrds__dev_release }}";
{% endif %}
{% endif %}

{% if untnd_pgrds__acquire_http_dl_limit %}
// Use the APT bandwidth limit feature.
Acquire::http::Dl-Limit "{{ untnd_pgrds__acquire_http_dl_limit }}";
{% endif %}

{% if untnd_pgrds__dpkg_options %}
// Set dpkg options that take effect during unattended upgrades. Configuration file changes can block installation
// of certain packages. Passing the flags "--force-confdef" and "--force-confold" will ensure updates are applied
// and old configuration files are preserved.
Dpkg::Options {
{% for dpkg_option in untnd_pgrds__dpkg_options %}
    "{{ dpkg_option }}";
{% endfor %}
};
{% endif %}

{% if not untnd_pgrds__allow_apt_mark_fallback %}
// When APT fails to mark a package to be upgraded or installed try adjusting candidates of related packages to help
// APT's resolver in finding a solution where the package can be upgraded or installed. This is a workaround until
// APT's resolver is fixed to always find a solution if it exists. (See Debian bug #711128). The fallback is enabled by
// default, except on Debian's sid release because uninstallable packages are frequent there. Disabling the fallback
// speeds up unattended-upgrades when there are uninstallable packages at the expense of rarely keeping back packages
// which could be upgraded or installed.
Unattended-Upgrade::Allow-APT-Mark-Fallback "false";
{% endif %}

{% if untnd_pgrds__allow_downgrade %}
// Allow package downgrade if Pin-Priority exceeds 1000.
Unattended-Upgrade::Allow-downgrade "true";
{% endif %}

{% if not untnd_pgrds__auto_fix_interrupted_dpkg %}
// This option allows you to control if on a unclean dpkg exit unattended-upgrades will automatically run
// dpkg --force-confold --configure -a. The default is 'true', to ensure updates keep getting installed.
Unattended-Upgrade::AutoFixInterruptedDpkg "false";
{% endif %}

{% if untnd_pgrds__automatic_reboot %}
// Automatically reboot *WITHOUT CONFIRMATION* if the file /var/run/reboot-required is found after the upgrade.
Unattended-Upgrade::Automatic-Reboot "true";
{% endif %}

{% if untnd_pgrds__automatic_reboot_time %}
// If automatic reboot is enabled and needed, reboot at the specific time instead of immediately. Default value is 'now'.
Unattended-Upgrade::Automatic-Reboot-Time "{{ untnd_pgrds__automatic_reboot_time }}";
{% endif %}

{% if not untnd_pgrds__automatic_reboot_with_users %}
// Automatically reboot even if there are users currently logged in when Unattended-Upgrade::Automatic-Reboot is set to true.
Unattended-Upgrade::Automatic-Reboot-WithUsers "false";
{% endif %}

{% if untnd_pgrds__debug %}
// Print debugging information both in unattended-upgrades and in unattended-upgrade-shutdown.
Unattended-Upgrade::Debug "true";
{% endif %}

{% if untnd_pgrds__install_on_shutdown %}
// Install all updates when the machine is shutting down instead of doing it in the background while the machine is running.
// This will - obviously - make shutdown slower.
Unattended-Upgrade::InstallOnShutdown "true";
{% endif %}

{% if untnd_pgrds__keep_debs_after_install %}
// Keep the downloaded deb packages after successful installs. By default these are removed after successful installs.
Unattended-Upgrade::Keep-Debs-After-Install "true";
{% endif %}

{% if untnd_pgrds__mail %}
// Send email to this address for problems or packages upgrades. If empty or unset then no email is sent, make sure that you
// have a working mail setup on your system. A package that provides 'mailx' must be installed.
Unattended-Upgrade::Mail "{{ untnd_pgrds__mail }}";
{% endif %}

{% if untnd_pgrds__mail_report %}
// Set this value to one of: "always", "only-on-error" or "on-change".  If this is not set, then any legacy boolean
// MailOnlyOnError value is used to chose between "only-on-error" and "on-change".
Unattended-Upgrade::MailReport "{{ untnd_pgrds__mail_report }}";
{% endif %}

{% if not untnd_pgrds__minimal_steps %}
// Split the upgrade into the smallest possible chunks so that they can be interrupted with SIGTERM. This makes the upgrade
// a bit slower but it has the benefit that shutdown while a upgrade is running is possible (with a small delay).
Unattended-Upgrade::MinimalSteps "false";
{% endif %}

{% if not untnd_pgrds__only_on_ac_power %}
// Download and install upgrades only on AC power.
Unattended-Upgrade::OnlyOnACPower "false";
{% endif %}

{% if untnd_pgrds__package_whitelist_strict %}
// When set, allow only packages in Unattended-Upgrade::Package-Whitelist to be upgraded. This means that you also need to
// list all the dependencies of a whitelisted package.
Unattended-Upgrade::Package-Whitelist-Strict "true"
{% endif %}

{% if not untnd_pgrds__remove_new_unused_dependencies %}
// Do automatic removal of newly unused dependencies after the upgrade.
Unattended-Upgrade::Remove-New-Unused-Dependencies "false";
{% endif %}

{% if untnd_pgrds__remove_unused_dependencies %}
// Do automatic removal of unused packages after the upgrade (equivalent to apt-get autoremove).
Unattended-Upgrade::Remove-Unused-Dependencies "true";
{% endif %}

{% if untnd_pgrds__remove_unused_kernel_packages %}
// Remove unused automatically installed kernel-related packages (kernel images, kernel headers and kernel version locked tools).
Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
{% endif %}

{% if untnd_pgrds__sender %}
// Use the specified value in the "From" field of outgoing mails. Default value is 'root'.
Unattended-Upgrade::Sender "{{ untnd_pgrds__sender }}";
{% endif %}

{% if not untnd_pgrds__skip_updates_on_metered_connections %}
// Download and install upgrades only on non-metered connection (i.e. skip or gracefully stop updates on a metered connection).
Unattended-Upgrade::Skip-Updates-On-Metered-Connections "false";
{% endif %}

{% if untnd_pgrds__syslog_enable %}
// Enable logging to syslog. Default is 'false'.
Unattended-Upgrade::SyslogEnable "true";
{% endif %}

{% if untnd_pgrds__syslog_facility %}
// Specify syslog facility. Default is 'daemon'.
Unattended-Upgrade::SyslogFacility "{{ untnd_pgrds__syslog_facility }}";
{% endif %}

{% if untnd_pgrds__update_days %}
// Set the days of the week that updates should be applied.
Unattended-Upgrade::Update-Days "{{ untnd_pgrds__update_days }}"
{% endif %}

{% if untnd_pgrds__verbose %}
// Verbose logging.
Unattended-Upgrade::Verbose "true";
{% endif %}

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
